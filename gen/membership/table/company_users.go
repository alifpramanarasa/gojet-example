//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CompanyUsers = newCompanyUsersTable("membership", "company_users", "")

type companyUsersTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnString
	CreatedAt mysql.ColumnTimestamp
	UpdatedAt mysql.ColumnTimestamp
	DeletedAt mysql.ColumnTimestamp
	CompanyID mysql.ColumnString
	UserID    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CompanyUsersTable struct {
	companyUsersTable

	NEW companyUsersTable
}

// AS creates new CompanyUsersTable with assigned alias
func (a CompanyUsersTable) AS(alias string) *CompanyUsersTable {
	return newCompanyUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CompanyUsersTable with assigned schema name
func (a CompanyUsersTable) FromSchema(schemaName string) *CompanyUsersTable {
	return newCompanyUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CompanyUsersTable with assigned table prefix
func (a CompanyUsersTable) WithPrefix(prefix string) *CompanyUsersTable {
	return newCompanyUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CompanyUsersTable with assigned table suffix
func (a CompanyUsersTable) WithSuffix(suffix string) *CompanyUsersTable {
	return newCompanyUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCompanyUsersTable(schemaName, tableName, alias string) *CompanyUsersTable {
	return &CompanyUsersTable{
		companyUsersTable: newCompanyUsersTableImpl(schemaName, tableName, alias),
		NEW:               newCompanyUsersTableImpl("", "new", ""),
	}
}

func newCompanyUsersTableImpl(schemaName, tableName, alias string) companyUsersTable {
	var (
		IDColumn        = mysql.StringColumn("id")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		UpdatedAtColumn = mysql.TimestampColumn("updated_at")
		DeletedAtColumn = mysql.TimestampColumn("deleted_at")
		CompanyIDColumn = mysql.StringColumn("company_id")
		UserIDColumn    = mysql.StringColumn("user_id")
		allColumns      = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, CompanyIDColumn, UserIDColumn}
		mutableColumns  = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, CompanyIDColumn, UserIDColumn}
	)

	return companyUsersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,
		CompanyID: CompanyIDColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
