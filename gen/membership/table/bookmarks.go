//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Bookmarks = newBookmarksTable("membership", "bookmarks", "")

type bookmarksTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnString
	CreatedAt      mysql.ColumnTimestamp
	UpdatedAt      mysql.ColumnTimestamp
	DeletedAt      mysql.ColumnTimestamp
	BookmarkTypeID mysql.ColumnString
	UserID         mysql.ColumnString
	ItemID         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type BookmarksTable struct {
	bookmarksTable

	NEW bookmarksTable
}

// AS creates new BookmarksTable with assigned alias
func (a BookmarksTable) AS(alias string) *BookmarksTable {
	return newBookmarksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BookmarksTable with assigned schema name
func (a BookmarksTable) FromSchema(schemaName string) *BookmarksTable {
	return newBookmarksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BookmarksTable with assigned table prefix
func (a BookmarksTable) WithPrefix(prefix string) *BookmarksTable {
	return newBookmarksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BookmarksTable with assigned table suffix
func (a BookmarksTable) WithSuffix(suffix string) *BookmarksTable {
	return newBookmarksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBookmarksTable(schemaName, tableName, alias string) *BookmarksTable {
	return &BookmarksTable{
		bookmarksTable: newBookmarksTableImpl(schemaName, tableName, alias),
		NEW:            newBookmarksTableImpl("", "new", ""),
	}
}

func newBookmarksTableImpl(schemaName, tableName, alias string) bookmarksTable {
	var (
		IDColumn             = mysql.StringColumn("id")
		CreatedAtColumn      = mysql.TimestampColumn("created_at")
		UpdatedAtColumn      = mysql.TimestampColumn("updated_at")
		DeletedAtColumn      = mysql.TimestampColumn("deleted_at")
		BookmarkTypeIDColumn = mysql.StringColumn("bookmark_type_id")
		UserIDColumn         = mysql.StringColumn("user_id")
		ItemIDColumn         = mysql.StringColumn("item_id")
		allColumns           = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, BookmarkTypeIDColumn, UserIDColumn, ItemIDColumn}
		mutableColumns       = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, BookmarkTypeIDColumn, UserIDColumn, ItemIDColumn}
	)

	return bookmarksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,
		BookmarkTypeID: BookmarkTypeIDColumn,
		UserID:         UserIDColumn,
		ItemID:         ItemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
