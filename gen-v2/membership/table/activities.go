//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Activities = newActivitiesTable("membership", "activities", "")

type activitiesTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnString
	CreatedAt      mysql.ColumnTimestamp
	UpdatedAt      mysql.ColumnTimestamp
	DeletedAt      mysql.ColumnTimestamp
	ActivityTypeID mysql.ColumnString
	TableName      mysql.ColumnString
	TableID        mysql.ColumnString
	UserID         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ActivitiesTable struct {
	activitiesTable

	NEW activitiesTable
}

// AS creates new ActivitiesTable with assigned alias
func (a ActivitiesTable) AS(alias string) *ActivitiesTable {
	return newActivitiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActivitiesTable with assigned schema name
func (a ActivitiesTable) FromSchema(schemaName string) *ActivitiesTable {
	return newActivitiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActivitiesTable with assigned table prefix
func (a ActivitiesTable) WithPrefix(prefix string) *ActivitiesTable {
	return newActivitiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActivitiesTable with assigned table suffix
func (a ActivitiesTable) WithSuffix(suffix string) *ActivitiesTable {
	return newActivitiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActivitiesTable(schemaName, tableName, alias string) *ActivitiesTable {
	return &ActivitiesTable{
		activitiesTable: newActivitiesTableImpl(schemaName, tableName, alias),
		NEW:             newActivitiesTableImpl("", "new", ""),
	}
}

func newActivitiesTableImpl(schemaName, tableName, alias string) activitiesTable {
	var (
		IDColumn             = mysql.StringColumn("id")
		CreatedAtColumn      = mysql.TimestampColumn("created_at")
		UpdatedAtColumn      = mysql.TimestampColumn("updated_at")
		DeletedAtColumn      = mysql.TimestampColumn("deleted_at")
		ActivityTypeIDColumn = mysql.StringColumn("activity_type_id")
		TableNameColumn      = mysql.StringColumn("table_name")
		TableIDColumn        = mysql.StringColumn("table_id")
		UserIDColumn         = mysql.StringColumn("user_id")
		allColumns           = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ActivityTypeIDColumn, TableNameColumn, TableIDColumn, UserIDColumn}
		mutableColumns       = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ActivityTypeIDColumn, TableNameColumn, TableIDColumn, UserIDColumn}
	)

	return activitiesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,
		ActivityTypeID: ActivityTypeIDColumn,
		TableName:      TableNameColumn,
		TableID:        TableIDColumn,
		UserID:         UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
