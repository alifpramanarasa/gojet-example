//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Users = newUsersTable("membership", "users", "")

type usersTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnString
	CreatedAt      mysql.ColumnTimestamp
	UpdatedAt      mysql.ColumnTimestamp
	DeletedAt      mysql.ColumnTimestamp
	Name           mysql.ColumnString
	Username       mysql.ColumnString
	Email          mysql.ColumnString
	Password       mysql.ColumnString
	IsSuperAdmin   mysql.ColumnBool
	ActivatedAt    mysql.ColumnTimestamp
	LanguageID     mysql.ColumnString
	OrganizationID mysql.ColumnString
	RoleID         mysql.ColumnString
	StatusID       mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UsersTable struct {
	usersTable

	NEW usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		NEW:        newUsersTableImpl("", "new", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn             = mysql.StringColumn("id")
		CreatedAtColumn      = mysql.TimestampColumn("created_at")
		UpdatedAtColumn      = mysql.TimestampColumn("updated_at")
		DeletedAtColumn      = mysql.TimestampColumn("deleted_at")
		NameColumn           = mysql.StringColumn("name")
		UsernameColumn       = mysql.StringColumn("username")
		EmailColumn          = mysql.StringColumn("email")
		PasswordColumn       = mysql.StringColumn("password")
		IsSuperAdminColumn   = mysql.BoolColumn("is_super_admin")
		ActivatedAtColumn    = mysql.TimestampColumn("activated_at")
		LanguageIDColumn     = mysql.StringColumn("language_id")
		OrganizationIDColumn = mysql.StringColumn("organization_id")
		RoleIDColumn         = mysql.StringColumn("role_id")
		StatusIDColumn       = mysql.StringColumn("status_id")
		allColumns           = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, UsernameColumn, EmailColumn, PasswordColumn, IsSuperAdminColumn, ActivatedAtColumn, LanguageIDColumn, OrganizationIDColumn, RoleIDColumn, StatusIDColumn}
		mutableColumns       = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, NameColumn, UsernameColumn, EmailColumn, PasswordColumn, IsSuperAdminColumn, ActivatedAtColumn, LanguageIDColumn, OrganizationIDColumn, RoleIDColumn, StatusIDColumn}
	)

	return usersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,
		Name:           NameColumn,
		Username:       UsernameColumn,
		Email:          EmailColumn,
		Password:       PasswordColumn,
		IsSuperAdmin:   IsSuperAdminColumn,
		ActivatedAt:    ActivatedAtColumn,
		LanguageID:     LanguageIDColumn,
		OrganizationID: OrganizationIDColumn,
		RoleID:         RoleIDColumn,
		StatusID:       StatusIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
